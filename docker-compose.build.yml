services:
  deepcite-core:
    build:
      dockerfile: ./core/Dockerfile
      context: .
    depends_on: &deepcite-depends-on
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["web"]
    ports:
      - "8000:8000"
    environment: &deepcite-core-env
      DEBUG:  ${DEBUG:-false}
      APP_ENV: ${APP_ENV:-DEV}
      SECRET_KEY: ${SECRET_KEY:-}
      WEBHOOK_SECRET_KEY: ${WEBHOOK_SECRET_KEY:-}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-*,}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-http://localhost:3000,}
      HOST_NAME: ${HOST_NAME:-http://localhost:8000}
      DB_HOST: ${DB_HOST:-postgres}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-core}
      RAZORPAY_KEY: ${RAZORPAY_KEY:-}
      RAZORPAY_SECRET: ${RAZORPAY_SECRET:-}
      RAZORPAY_WEBHOOK_SECRET_KEY: ${RAZORPAY_WEBHOOK_SECRET_KEY:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minio}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-miniosecret}
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME:-deepcite}
      AWS_S3_REGION_NAME: ${AWS_S3_REGION_NAME:-ap-south-1}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-django-db}
      CELERY_CACHE_BACKEND: ${CELERY_CACHE_BACKEND:-django-cache}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      DEEPCITE_RAG_EP: ${DEEPCITE_RAG_EP:-http://localhost:5001}
      DEEPCITE_AUTH_EP: ${DEEPCITE_AUTH_EP:-http://localhost:10000}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  deepcite-celery:
    build:
      dockerfile: ./core/Dockerfile
      context: .
    command: ["celery"]
    environment:
      <<: *deepcite-core-env
    restart: always

  deepcite-beat:
    build:
      dockerfile: ./core/Dockerfile
      context: .
    command: ["beat"]
    environment:
      <<: *deepcite-core-env
    restart: always

  deepcite-web:
    build:
      dockerfile: ./web/Dockerfile
      context: .
      args:
        - NUXT_PUBLIC_AUTH_BASE_URL=${NUXT_PUBLIC_AUTH_BASE_URL:-http://localhost:10000}
        - NUXT_PUBLIC_APP_BASE_URL=${NUXT_PUBLIC_APP_BASE_URL:-localhost:3000}
        - NUXT_PUBLIC_API_SCHEME=${NUXT_PUBLIC_API_SCHEME:-http}
        - NUXT_PUBLIC_API_BASE_URL=${NUXT_PUBLIC_API_BASE_URL:-localhost:8000}
        - NUXT_PUBLIC_GOOGLE_ANALYTICS_ID=${NUXT_PUBLIC_GOOGLE_ANALYTICS_ID:-}
        - NUXT_PUBLIC_S3_URL=${NUXT_PUBLIC_S3_URL:-'http://localhost:9000/'}
    depends_on:
      deepcite-auth:
        condition: service_healthy
      deepcite-core:
        condition: service_healthy
      deepcite-rag:
        condition: service_healthy
    ports:
      - "3000:3000"
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  deepcite-auth:
    build:
      dockerfile: ./auth/Dockerfile
      context: .
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "10000:10000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-10000}
      BASE_DOMAIN: ${BASE_DOMAIN:-localhost}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-}
      TRUSTED_ORIGINS: ${TRUSTED_ORIGINS:-}
      DATABASE_STRING: ${DATABASE_STRING:-}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID:-}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minio}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-miniosecret}
      AWS_REGION: ${AWS_REGION:-ap-south-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-deepcite}
      AWS_SENDER_EMAIL: ${AWS_SENDER_EMAIL:-}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-}
      WEBHOOK_EP: ${WEBHOOK_EP:-}
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:10000/api/auth/ok" ]
      interval: 30s
      timeout: 10s
      retries: 3

  deepcite-rag:
    build:
      dockerfile: ./rag/Dockerfile
      context: .
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5001:5001"
    volumes:
      - deepcite_rag_data:/data
    env_file:
      - ./.env.rag
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio
    entrypoint: sh
    # create the 'deepcite' bucket before starting the service
    command: -c 'mkdir -p /data/deepcite && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniosecret
    ports:
      - "9090:9000"
      - "9091:9001"
    volumes:
      - deepcite_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - deepcite_postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d

volumes:
  deepcite_postgres_data:
    driver: local
  deepcite_minio_data:
    driver: local
  deepcite_rag_data:
    driver: local
